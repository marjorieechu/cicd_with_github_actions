# name: DevOps Pipeline

# on:
#   push:
#     branches:
#       - main

# env:
#   API_IMAGE: sentinel/s9-api:latest
#   DB_IMAGE: sentinel/s9-db:latest
#   FRONTEND_IMAGE: sentinel/s9-frontend:latest

# jobs:
#   build_and_push_images:
#     name: Build and Push Docker Images to DockerHub
#     runs-on: [self-hosted, s8]

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Check Checkov Version
#         run: |
#           echo "üîç Verifying Checkov installation..."
#           if ! command -v checkov &> /dev/null; then
#             echo "‚ùå Checkov is not installed or not in PATH"
#             exit 1
#           fi
#           checkov --version

#       - name: Run Checkov Scan with Config File
#         run: |
#           ls -l
#           echo "üîç Running Checkov on s9/app01/Dockerfile using .checkov.yaml config"
#           cat .checkov.yaml
#           checkov -f s9/app01/api.Dockerfile --config-file .checkov.yaml
#           checkov -f s9/app01/db.Dockerfile --config-file .checkov.yaml
#           checkov -f s9/app01/frontend.Dockerfile --config-file .checkov.yaml

#       - name: Build Docker Images (API, DB, Frontend)
#         working-directory: mygithub/app01
#         run: |
#           sudo docker build -f api.Dockerfile -t $API_IMAGE .
#           sudo docker build -f db.Dockerfile -t $DB_IMAGE .
#           sudo docker build -f frontend.Dockerfile -t $FRONTEND_IMAGE .
#           sudo docker images

#       - name: Check Trivy Version
#         run: echo "Verifying Trivy installation..."
#           if ! command -v trivy &> /dev/null; then
#           echo "Trivy is not installed or not in Path"
#           exit 1
#           fi
#           trivy --version

#       - name: Scan Docker Images with Trivy
#         run: |
#           echo "üîç Scanning API image..."
#           trivy image --severity MEDIUM,HIGH,CRITICAL --no-progress $API_IMAGE

#           echo "üîç Scanning DB image..."
#           trivy image --severity MEDIUM,HIGH,CRITICAL --no-progress $DB_IMAGE

#           echo "üîç Scanning Frontend image..."
#           trivy image --severity MEDIUM,HIGH,CRITICAL --no-progress $FRONTEND_IMAGE

#       - name: Login to DockerHub
#         run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ vars.DOCKERHUB_USERNAME }}" --password-stdin

#       - name: Push Docker Images
#         run: |
#           docker push $API_IMAGE
#           docker push $DB_IMAGE
#           docker push $FRONTEND_IMAGE

#   deploy:
#     name: Deploy using Docker Compose
#     runs-on: [self-hosted, s8]
#     needs: build_and_push_images

#     env:
#       API_IMAGE: sentinel/s9-api:latest
#       DB_IMAGE: sentinel/s9-db:latest
#       FRONTEND_IMAGE: sentinel/s9-frontend:latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Replace image placeholders in docker-compose.yml
#         working-directory: mygithub/app01
#         run: |
#           sed -i "s|API_IMAGE|$API_IMAGE|g" docker-compose.yml
#           sed -i "s|DB_IMAGE|$DB_IMAGE|g" docker-compose.yml
#           sed -i "s|FRONTEND_IMAGE|$FRONTEND_IMAGE|g" docker-compose.yml
#           sed -i "s|POSTGRES_USER_S9|${{ vars.POSTGRES_USER_S9 }}|g" docker-compose.yml
#           sed -i "s|POSTGRES_PASSWORD_S9|${{ secrets.POSTGRES_PASSWORD_S9 }}|g" docker-compose.yml
#           cat docker-compose.yml

#           docker pull $API_IMAGE
#           docker pull $DB_IMAGE
#           docker pull $FRONTEND_IMAGE

#       - name: Deploy with Docker Compose
#         working-directory: mygithub/app01
#         run: |
#           #docker compose down -v || true
#           docker compose down --volumes --remove-orphans
#           docker-compose up -d
#           docker-compose ps
